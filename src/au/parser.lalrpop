use crate::ast::*;
use std::str::FromStr;

grammar(tag: &mut ParserTag);

// Macros

CommaList<T>: Vec<T> = {
  <T> => vec![<>],
  <l:(<T> ",")+> <r:T?> => match r {
    None => l,
    Some(r) => {
      let mut l = l;
      l.push(r);
      l
    }
  },
};

CommaListOpt<T>: Vec<T> = { ","? => Vec::new(), CommaList<T> };

AutoScheme<T>: AutoScheme<T> = T => AutoScheme(<>);

SchemePrefix<T>: SchemePrefix<T> = {
  // TODO: this just ignores duplicate names
  "<" <CommaList<NamedVar>> ">" <T> => SchemePrefix::Specific(<>),
  "<" ".." ">" <T> => SchemePrefix::All(<>),
  T => SchemePrefix::Inst(<>),
};

// Nonterminals

pub Expr: Expr = {
  Assert => Expr::Assert(<>),
  <Clause> "?" => Expr::Query(<>),
  <SchemePrefix<Value>> "<>" <SchemePrefix<Value>> => Expr::UnifyVal(<>),
  <SchemePrefix<App>> "<>" <SchemePrefix<App>> => Expr::UnifyApp(<>),
  "/p" <SchemePrefix<Value>> => Expr::PrintVal(<>),
  "/p" <SchemePrefix<Statement>> => Expr::PrintStmt(<>),
  "/f" <Value> => Expr::Fold(<>),
  "/e" => Expr::PrintEnv,
  "/r" => Expr::Reset,
};

pub Input: Input = Assert => Input(<>);

pub Assert: Assert = (<AutoScheme<Statement>> ".")+ => Assert(<>);

pub Statement: Statement = {
  <App> r":-|⊢" <Clause> => Statement::Cond(<>),
  <App> => Statement::Fact(<>),
};

pub Clause = OrClause;

OrClause: Clause = {
  <l:OrClause> ";" <r:AndClause> => Clause::Or(Box::new(l), Box::new(r)),
  AndClause,
};

AndClause: Clause = {
  <l:AndClause> "," <r:UnaryClause> => Clause::And(Box::new(l), Box::new(r)),
  UnaryClause,
};

UnaryClause: Clause = {
  r"~|¬" <UnaryClause> => Clause::Not(Box::new(<>)),
  PrimClause,
};

PrimClause: Clause = {
  App => Clause::App(<>),
  r":top|⊤" => Clause::Top,
  r":bot|⊥" => Clause::Bot,
  "(" <Clause> ")",
};

pub App: App = Atom Tuple => App(<>);

pub Value = ListValue;

ListValue: Value = {
  <l:AddValue> ":" <r:ListValue> => Value::List(Box::new(l), Box::new(r)),
  AddValue,
};

AddValue: Value = {
  <l:AddValue> "+" <r:SubValue> => Value::Binop(BinaryOp::Add, Box::new(l), Box::new(r)),
  SubValue,
};

SubValue: Value = {
  <l:SubValue> "-" <r:MulValue> => Value::Binop(BinaryOp::Sub, Box::new(l), Box::new(r)),
  MulValue,
};

MulValue: Value = {
  <l:MulValue> "*" <r:DivValue> => Value::Binop(BinaryOp::Mul, Box::new(l), Box::new(r)),
  DivValue,
};

DivValue: Value = {
  <l:DivValue> "/" <r:ModValue> => Value::Binop(BinaryOp::Div, Box::new(l), Box::new(r)),
  ModValue,
};

ModValue: Value = {
  <l:ModValue> "%" <r:UnaryValue> => Value::Binop(BinaryOp::Mod, Box::new(l), Box::new(r)),
  UnaryValue,
};

UnaryValue: Value = {
  "+" <UnaryValue> => Value::Unop(UnaryOp::Pos, Box::new(<>)),
  "-" <UnaryValue> => Value::Unop(UnaryOp::Neg, Box::new(<>)),
  PrimValue,
}

PrimValue: Value = {
  Var => Value::Var(<>),
  Atom => Value::Atom(<>),
  i32 => Value::Int(<>),
  Tuple => Value::Tuple(<>),
  "[" "]" => Value::EmptyList,
};

pub Var: Var = {
  NamedVar => Var::Named(<>),
  "_" => Var::Anon,
};

pub Tuple: Tuple = "(" <CommaListOpt<Value>> ")" => Tuple(<>);

NamedVar: NamedVar = r"[\p{Lu}\p{Lt}][\p{L}\p{N}]*" => NamedVar(<>.into());
Atom: Atom = r"\p{Ll}[\p{L}\p{N}]*" => Atom(<>.into());
// TODO: this is potentially bad
i32: i32 = r"[0-9]+" => i32::from_str(<>).unwrap();
